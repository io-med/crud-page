{"version":3,"sources":["api/api.ts","components/Button/Button.tsx","components/ResultMessage/ResultMessage.tsx","components/AddPostForm/AddPostForm.tsx","components/PopUpOverlay/PopUpOverlay.tsx","components/AddPost/AddPost.tsx","components/AddPostButton/AddPostButton.tsx","components/SearchAndSort/SearchAndSort.tsx","components/Header/Header.tsx","components/ConfirmPopUp/ConfirmPopUp.tsx","components/EditPopUp/EditPopUp.tsx","components/EditOrDelete/EditOrDelete.tsx","components/PostCard/PostCard.tsx","components/ListOfPosts/ListOfPosts.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BASE_URL","Button","clickHandler","text","isWhite","isSubmit","fixedWidth","className","classNames","type","onClick","ResultMessage","hidePopUp","itWasError","message","AddPostForm","addPost","useState","title","setTitle","setText","image","setImage","url","setUrl","errorWasReceived","setErrorWasReceived","postWasAdded","setPostWasAdded","newPost","submitHandler","event","postToAdd","post","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","resp","catch","onSubmit","value","onChange","target","placeholder","required","PopUpOverlay","AddPost","setAddPopUpIsShown","AddPostButton","addPopUpToggler","SearchAndSort","isReverse","query","setSortBy","reverse","setQuery","resetSort","Header","modeToggler","isInEditMode","isReversed","ConfirmPopUp","popUpDisplayHandler","postId","setPosts","postWasDeleted","setPostWasDeleted","deletePost","idOfPostToDelete","ok","Promise","reject","removePost","current","filter","id","EditPopUp","postData","postWasChanged","setPostWasChanged","modifiedPost","posts","map","changeSelectedPost","EditOrDelete","confirmIsShown","setConfirmIsShown","editIsShown","setEditIsShown","PostCard","href","rel","src","alt","ListOfPosts","active","App","addPopUpIsShown","setIsInEditMode","sortBy","setIsReversed","sorted","toLowerCase","includes","sort","postA","postB","localeCompare","sort_order","Date","updated_at","getTime","loadAllPosts","postsFormServer","useEffect","prev","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.920971de.chunk.js","sourcesContent":["import { Post } from \"../types/Post\";\n\nconst BASE_URL = 'https://yourtestapi.com/api/posts';\n\nexport const getPosts = (): Promise<Post[]> => {\n  return fetch(`${BASE_URL}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject();\n      }\n\n      return response.json();\n    })\n};\n\nexport const removePost = (postId: number) => {\n  return fetch(`${BASE_URL}/${postId}`, { method: 'DELETE' })\n  .then(response => {\n    if (!response.ok) {\n      return Promise.reject();\n    }\n\n    return response.json();\n  })\n};\n\nexport const editPost = (post: Partial<Post>, postId: number) => {\n  return fetch(`${BASE_URL}/${postId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(post),\n  })\n    .then(response => response.json());\n}\n\nexport const createPost = (post: Partial<Post>): Promise<Post> => {\n  return fetch(`${BASE_URL}`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(post),\n  })\n    .then(response => response.json());\n};\n","import classNames from 'classnames';\n\ntype Props = {\n  text: string;\n  clickHandler?: () => void;\n  isWhite?: boolean;\n  isSubmit?: boolean;\n  fixedWidth?: boolean;\n}\n\nexport const Button: React.FC<Props> = ({\n  clickHandler,\n  text,\n  isWhite,\n  isSubmit,\n  fixedWidth,\n}) => {\n  return (\n    <button\n      className={classNames(\n        'Button',\n        { 'Button--white': isWhite },\n        { 'Button--fixed-width': fixedWidth },\n      )}\n      type={isSubmit ? 'submit' : 'button'}\n      onClick={clickHandler}\n    >\n      {text}\n    </button>\n  )\n}","import classNames from 'classnames';\nimport { Button } from '../Button';\n\ntype Props = {\n  hidePopUp: () => void;\n  itWasError: boolean;\n}\n\nexport const ResultMessage: React.FC<Props> = ({ hidePopUp, itWasError }) => {\n\n  let message = 'Success!';\n\n  if (itWasError) {\n    message = 'Oops, something went wrong!'\n  }\n\n  return (\n    <div className=\"ResultMessage\">\n      <p\n        className={classNames(\n          'ResultMessage__text',\n          { 'ResultMessage__text--error': itWasError },\n        )}\n      >\n        {message}\n      </p>\n\n      <Button\n        text=\"close\"\n        clickHandler={hidePopUp}\n      />\n    </div>\n  )\n}\n","import { useState } from \"react\";\nimport { createPost } from \"../../api/api\";\nimport { Post } from \"../../types/Post\";\nimport { Button } from \"../Button\";\nimport { ResultMessage } from \"../ResultMessage\";\n\ntype Props = {\n  addPost: (post: Post) => void;\n  hidePopUp: () => void;\n}\n\nexport const AddPostForm: React.FC<Props> = ({ addPost, hidePopUp }) => {\n  const [title, setTitle] = useState('');\n  const [text, setText] = useState('');\n  const [image, setImage] = useState('');\n  const [url, setUrl] = useState('');\n  const [errorWasReceived, setErrorWasReceived] = useState(false);\n  const [postWasAdded, setPostWasAdded] = useState(false);\n\n  const newPost = {\n    title,\n    text,\n    image,\n    url,\n  }\n\n  const clear = () => {\n    setTitle('');\n    setText('');\n    setImage('');\n    setUrl('');\n  }\n\n  const submitHandler = (\n    event: React.FormEvent<HTMLFormElement>,\n    postToAdd: Partial<Post>,\n  ) => {\n    event.preventDefault();\n    createPost(postToAdd)\n      .then((resp) => {\n        addPost(resp);\n        setPostWasAdded(true);\n      })\n      .catch(() => {\n        setErrorWasReceived(true);\n      })\n    clear();\n  };\n\n  return (\n    <form\n      className=\"AddPostForm\"\n      onSubmit={(event) => {\n        submitHandler(event, newPost)\n      }}\n    >\n      {errorWasReceived || postWasAdded ||\n        <div className=\"AddPostForm__content\">\n          <h2\n            className=\"AddPostForm__heading\"\n          >\n            Add new post\n          </h2>\n\n          <input\n            className=\"AddPostForm__input\"\n            type=\"text\"\n            value={title}\n            onChange={(event => {\n              setTitle(event.target.value)\n            })}\n            placeholder=\"enter english name\"\n            required\n          />\n\n          <input\n            className=\"AddPostForm__input\"\n            type=\"text\"\n            value={text}\n            onChange={(event => {\n              setText(event.target.value)\n            })}\n            placeholder=\"enter latin name\"\n            required\n          />\n\n          <input\n            className=\"AddPostForm__input\"\n            type=\"text\"\n            value={image}\n            onChange={(event => {\n              setImage(event.target.value)\n            })}\n            placeholder=\"add image url\"\n            required\n          />\n\n          <input\n            className=\"AddPostForm__input\"\n            type=\"text\"\n            value={url}\n            onChange={(event => {\n              setUrl(event.target.value)\n            })}\n            placeholder=\"add article url\"\n            required\n          />\n\n          <div className=\"AddPostForm__buttons\">\n            <Button\n              text=\"add post\"\n              isSubmit={true}\n            />\n\n            <Button\n              text=\"cancel\"\n              clickHandler={hidePopUp}\n              isWhite={true}\n            />\n          </div>\n        </div>\n      }\n      {errorWasReceived &&\n        <ResultMessage\n          hidePopUp={hidePopUp}\n          itWasError={errorWasReceived}\n        />\n      }\n      {postWasAdded &&\n        <ResultMessage\n          hidePopUp={hidePopUp}\n          itWasError={errorWasReceived}\n        />\n      }\n    </form>\n  )\n}\n","type Props = {\n  hidePopUp: () => void;\n}\n\nexport const PopUpOverlay: React.FC<Props> = ({ hidePopUp }) => {\n  return (\n    <div\n      className=\"PopUpOverlay\"\n      onClick={hidePopUp}\n    >\n    </div>\n  )\n}","import { Post } from \"../../types/Post\";\nimport { AddPostForm } from \"../AddPostForm\";\nimport { PopUpOverlay } from \"../PopUpOverlay\";\n\ntype Props = {\n  setAddPopUpIsShown: (addPopUpIsShown: boolean) => void;\n  addPost: (post: Post) => void;\n}\n\nexport const AddPost: React.FC<Props> = ({\n  setAddPopUpIsShown,\n  addPost,\n}) => {\n\n  const hidePopUp = () => {\n    setAddPopUpIsShown(false);\n  }\n\n  return (\n    <div className=\"AddPost\">\n      <PopUpOverlay \n        hidePopUp={hidePopUp}\n      />\n\n      <AddPostForm\n        addPost={addPost}\n        hidePopUp={hidePopUp}\n      />\n    </div>\n  )\n}\n","import { Button } from \"../Button\"\n\ntype Props = {\n  addPopUpToggler: () => void;\n}\n\nexport const AddPostButton: React.FC<Props> = ({ addPopUpToggler }) => {\n  return (\n\n    <div\n      className=\"AddPostButton\"\n    >\n      <Button\n        text=\"create new post\"\n        clickHandler={addPopUpToggler}\n      />\n    </div>\n  )\n}","import { Button } from \"../Button\"\n\ntype Props = {\n  isReverse: boolean;\n  query: string;\n  setSortBy: (sortBy: string) => void;\n  reverse: () => void;\n  setQuery: (query: string) => void;\n  resetSort: () => void;\n}\n\nexport const SearchAndSort: React.FC<Props> = ({\n  isReverse,\n  query,\n  setSortBy,\n  reverse,\n  setQuery,\n  resetSort,\n}) => {\n  return (\n    <div className=\"SearchAndSort\">\n      <input\n        className=\"SearchAndSort__input\"\n        type=\"text\"\n        value={query}\n        placeholder=\"search...\"\n        onChange={(event) => {\n          setQuery(event.target.value)\n        }}\n      />\n\n      <select\n        className=\"SearchAndSort__select\"\n        onChange={(event) => {\n          setSortBy(event.target.value)\n        }}\n      >\n        <option value=\"title\">\n          english name\n        </option>\n\n        <option value=\"text\">\n          latin name\n        </option>\n\n        <option value=\"order\">\n          order\n        </option>\n\n        <option value=\"updated\">\n          updated\n        </option>\n      </select>\n\n      <Button\n        text={isReverse ? 'v' : '^'}\n        clickHandler={reverse}\n        isWhite={true}\n      />\n      \n      <Button\n        text=\"reset\"\n        isWhite={true}\n        clickHandler={resetSort}\n      />\n    </div>\n  )\n}","import { Button } from \"../Button\";\nimport { SearchAndSort } from \"../SearchAndSort\";\n\ntype Props = {\n  modeToggler: () => void;\n  isInEditMode: boolean;\n  isReversed: boolean;\n  query: string;\n  setSortBy: (sortBy: string) => void;\n  reverse: () => void;\n  setQuery: (query: string) => void;\n  resetSort: () => void;\n}\n\nexport const Header: React.FC<Props> = ({\n  modeToggler,\n  isInEditMode,\n  isReversed,\n  query,\n  setSortBy,\n  reverse,\n  setQuery,\n  resetSort,\n}) => {\n  return (\n    <header className=\"Header\">\n      <h1 className=\"Header__heading\">\n        CRUD\n      </h1>\n      <SearchAndSort\n        isReverse={isReversed}\n        query={query}\n        setSortBy={setSortBy}\n        reverse={reverse}\n        setQuery={setQuery}\n        resetSort={resetSort}\n      />\n      <Button\n        text={isInEditMode ? 'exit edit mode' : 'enter edit mode'}\n        fixedWidth={true}\n        clickHandler={modeToggler}\n      />\n    </header>\n  )\n};\n","import { useState } from \"react\";\nimport { removePost } from \"../../api/api\";\nimport { Post } from \"../../types/Post\";\nimport { Button } from \"../Button\";\nimport { PopUpOverlay } from \"../PopUpOverlay\";\nimport { ResultMessage } from \"../ResultMessage\";\n\ntype Props = {\n  popUpDisplayHandler: (isDisplayed: boolean) => void;\n  setPosts: (posts: Post[] | ((current: Post[]) => Post[])) => void;\n  postId: number;\n}\n\nexport const ConfirmPopUp: React.FC<Props> = ({ popUpDisplayHandler, postId, setPosts }) => {\n  const [errorWasReceived, setErrorWasReceived] = useState(false);\n  const [postWasDeleted, setPostWasDeleted] = useState(false);\n\n  const hidePopUp = () => {\n    popUpDisplayHandler(false);\n  }\n\n  const deletePost = (idOfPostToDelete: number) => {\n    removePost(idOfPostToDelete)\n      .then(() => {\n        setPosts((current: Post[]) => {\n          return current.filter(post => post.id !== postId);\n        });\n        setPostWasDeleted(true);\n      })\n      .catch(() => {\n        setErrorWasReceived(true)\n      })\n  }\n\n  const clickHandler = () => {\n    deletePost(postId);\n  }\n\n  return (\n    <div className=\"ConfirmPopUp\">\n      <PopUpOverlay\n        hidePopUp={hidePopUp}\n      />\n\n      <div className=\"ConfirmPopUp__content\">\n        {errorWasReceived || postWasDeleted ||\n          <div className=\"ConfirmPopUp__interface\">\n            <p className=\"ConfirmPopUp__text\">\n              Are you sure?\n            </p>\n\n            <div className=\"ConfirmPopUp__buttons\">\n              <Button\n                clickHandler={clickHandler}\n                text=\"yes\"\n                isWhite={true}\n                fixedWidth={true}\n              />\n\n              <Button\n                clickHandler={hidePopUp}\n                text=\"no\"\n                fixedWidth={true}\n              />\n            </div>\n          </div>\n        }\n\n        <div className=\"ConfirmPopUp__message\">\n          {errorWasReceived &&\n            <ResultMessage\n              hidePopUp={hidePopUp}\n              itWasError={errorWasReceived}\n            />\n          }\n\n          {postWasDeleted &&\n            <ResultMessage\n              hidePopUp={hidePopUp}\n              itWasError={errorWasReceived}\n            />\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n","import { useState } from \"react\";\nimport { editPost } from \"../../api/api\";\nimport { Post } from \"../../types/Post\";\nimport { Button } from \"../Button\";\nimport { PopUpOverlay } from \"../PopUpOverlay\";\nimport { ResultMessage } from \"../ResultMessage\";\n\ntype Props = {\n  popUpDisplayHandler: (isDisplayed: boolean) => void;\n  setPosts: (posts: Post[] | ((current: Post[]) => Post[])) => void;\n  postData: Post;\n}\n\nexport const EditPopUp: React.FC<Props> = ({\n  popUpDisplayHandler,\n  postData,\n  setPosts,\n}) => {\n  const [title, setTitle] = useState(postData.title);\n  const [text, setText] = useState(postData.text);\n  const [image, setImage] = useState(postData.image);\n  const [url, setUrl] = useState(postData.url);\n  const [errorWasReceived, setErrorWasReceived] = useState(false);\n  const [postWasChanged, setPostWasChanged] = useState(false);\n\n  const modifiedPost = {\n    title,\n    text,\n    image,\n    url,\n  }\n\n  const changeSelectedPost = (posts: Post[], response: Post) => {\n    return posts.map(post => {\n      if (post.id === response.id) {\n        return { ...post, ...response };\n      }\n\n      return post;\n    })\n  }\n\n  const hidePopUp = () => {\n    popUpDisplayHandler(false);\n  }\n\n  const submitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    editPost(modifiedPost, postData.id)\n      .then((response) => {\n        setPosts(current => {\n          return changeSelectedPost(current, response)\n        });\n        setPostWasChanged(true);\n      })\n      .catch(() => {\n        setErrorWasReceived(true);\n      });\n  };\n\n  return (\n    <div className=\"EditPopUp\">\n      <PopUpOverlay\n        hidePopUp={hidePopUp}\n      />\n\n      <form\n        className=\"EditPopUp__form\"\n        onSubmit={(event) => {\n          submitHandler(event);\n        }}\n      >\n        {errorWasReceived || postWasChanged ||\n          <div className=\"EditPopUp__interface\">\n            <h2 className=\"EditPopUp__heading\">\n              Edit this post\n            </h2>\n\n            <input\n              className=\"EditPopUp__input\"\n              type=\"text\"\n              value={title}\n              onChange={(event => {\n                setTitle(event.target.value)\n              })}\n              placeholder=\"enter english name\"\n              required\n            />\n\n            <input\n              className=\"EditPopUp__input\"\n              type=\"text\"\n              value={text}\n              onChange={(event => {\n                setText(event.target.value)\n              })}\n              placeholder=\"enter latin name\"\n              required\n            />\n\n            <input\n              className=\"EditPopUp__input\"\n              type=\"text\"\n              value={image}\n              onChange={(event => {\n                setImage(event.target.value)\n              })}\n              placeholder=\"add image url\"\n              required\n            />\n\n            <input\n              className=\"EditPopUp__input\"\n              type=\"text\"\n              value={url}\n              onChange={(event => {\n                setUrl(event.target.value)\n              })}\n              placeholder=\"add article url\"\n              required\n            />\n\n            <div className=\"EditPopUp__buttons\">\n              <Button\n                text=\"submit\"\n                isSubmit={true}\n              />\n\n              <Button\n                text=\"cancel\"\n                isWhite={true}\n                clickHandler={hidePopUp}\n              />\n            </div>\n          </div>\n        }\n\n        <div className=\"EditPopUp__message\">\n          {errorWasReceived &&\n            <ResultMessage\n              hidePopUp={hidePopUp}\n              itWasError={errorWasReceived}\n            />\n          }\n\n          {postWasChanged &&\n            <ResultMessage\n              hidePopUp={hidePopUp}\n              itWasError={errorWasReceived}\n            />\n          }\n        </div>\n      </form>\n    </div>\n  )\n}\n","import { useState } from \"react\";\nimport { Post } from \"../../types/Post\";\nimport { Button } from \"../Button\";\nimport { ConfirmPopUp } from \"../ConfirmPopUp\";\nimport { EditPopUp } from \"../EditPopUp\";\n\ntype Props = {\n  postData: Post;\n  setPosts: (posts: Post[] | ((current: Post[]) => Post[])) => void;\n}\n\nexport const EditOrDelete: React.FC<Props> = ({ postData, setPosts }) => {\n  const [confirmIsShown, setConfirmIsShown] = useState(false);\n  const [editIsShown, setEditIsShown] = useState(false);\n\n  const showEdit = () => {\n    setEditIsShown(true);\n  }\n\n  const showConfirm = () => {\n    setConfirmIsShown(true);\n  }\n\n  return (\n    <div className=\"EditOrDelete\">\n      <Button\n        text=\"edit\"\n        clickHandler={showEdit}\n        fixedWidth={true}\n      />\n\n      <Button\n        text=\"delete\"\n        isWhite={true}\n        clickHandler={showConfirm}\n        fixedWidth={true}\n      />\n\n      {confirmIsShown &&\n        <ConfirmPopUp\n          popUpDisplayHandler={setConfirmIsShown}\n          postId={postData.id}\n          setPosts={setPosts}\n        />\n      }\n\n      {editIsShown &&\n        <EditPopUp\n          postData={postData}\n          popUpDisplayHandler={setEditIsShown}\n          setPosts={setPosts}\n        />\n      }\n    </div>\n  )\n};\n","import { Post } from \"../../types/Post\"\nimport { EditOrDelete } from \"../EditOrDelete\"\n\ntype Props = {\n  postData: Post;\n  isInEditMode: boolean;\n  setPosts: (posts: Post[] | ((current: Post[]) => Post[])) => void;\n}\n\nexport const PostCard: React.FC<Props> = ({ postData, isInEditMode, setPosts }) => {\n  return (\n    <div className=\"PostCard\">\n      <h2 className=\"PostCard__heading\">\n        {postData.title}\n      </h2>\n\n      <p className=\"PostCard__latin-name\">\n        {postData.text}\n      </p>\n\n      <a\n        href={postData.url}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <img\n          className=\"PostCard__image\"\n          src={postData.image}\n          alt={postData.title}\n        />\n      </a>\n\n      {isInEditMode &&\n        <EditOrDelete\n          postData={postData}\n          setPosts={setPosts}\n        />}\n    </div>\n  )\n}\n","import { Post } from \"../../types/Post\";\nimport { PostCard } from \"../PostCard\";\n\ntype Props = {\n  posts: Post[];\n  isInEditMode: boolean;\n  setPosts: (posts: Post[] | ((current: Post[]) => Post[])) => void;\n}\n\nexport const ListOfPosts: React.FC<Props> = ({ posts, isInEditMode, setPosts }) => {\n\n  return (\n    <ul className='ListOfPosts'>\n      {posts.map(post => (\n        (post.active === 1) &&\n        <li\n          className='ListOfPosts__item'\n          key={post.id}\n        >\n          <PostCard\n            isInEditMode={isInEditMode}\n            postData={post}\n            setPosts={setPosts}\n          />\n        </li>\n      ))}\n    </ul>\n  )\n};\n","import './App.scss';\nimport { useEffect, useState } from 'react';\nimport { getPosts } from './api/api';\nimport { AddPost } from './components/AddPost';\nimport { AddPostButton } from './components/AddPostButton';\nimport { Post } from './types/Post';\nimport { Header } from './components/Header';\nimport { ListOfPosts } from './components/ListOfPosts';\n\nfunction App() {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [addPopUpIsShown, setAddPopUpIsShown] = useState(false);\n  const [isInEditMode, setIsInEditMode] = useState(false);\n  const [sortBy, setSortBy] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const [query, setQuery] = useState('');\n\n  const reverse = () => {\n    setIsReversed(current => !current);\n  }\n\n  const resetSort = () => {\n    setSortBy('');\n    setIsReversed(false);\n    setQuery('');\n  }\n\n  const sorted = posts.filter(post => {\n    return (\n      post.title\n        .toLowerCase()\n        .includes(query.toLowerCase())\n      || post.text\n        .toLowerCase()\n        .includes(query.toLowerCase())\n    )\n  })\n\n  sorted.sort((postA, postB) => {\n    switch (sortBy) {\n      case 'title':\n        return postA.title.localeCompare(postB.title);\n\n      case 'text':\n        return postA.text.localeCompare(postB.text);\n\n      case 'order':\n        if (postA.sort_order && postB.sort_order) {\n          return (postA.sort_order - postB.sort_order)\n        } else if (postA.sort_order) {\n          return -1;\n        } else if (postB.sort_order) {\n          return 1;\n        } else {\n          return -1;\n        };\n\n      case 'updated':\n        const dateA = new Date(postA.updated_at).getTime();\n        const dateB = new Date(postB.updated_at).getTime();\n\n        return (dateA - dateB);\n\n      default:\n        return 0;\n    }\n  })\n\n  if (isReversed) {\n    sorted.reverse();\n  }\n\n  const modeToggler = () => {\n    setIsInEditMode(current => !current)\n  }\n\n  const addPopUpToggler = () => {\n    setAddPopUpIsShown(current => !current);\n  }\n\n  const loadAllPosts = () => {\n    getPosts()\n      .then(postsFormServer => {\n        setPosts(postsFormServer);\n      });\n  }\n\n  const addPost = (post: Post) => {\n    setPosts(prev => {\n      return [...prev, { ...post, active: 1 }];\n    });\n  };\n\n  useEffect(() => {\n    loadAllPosts();\n  }, [])\n\n  return (\n    <>\n      <Header\n        modeToggler={modeToggler}\n        isInEditMode={isInEditMode}\n        isReversed={isReversed}\n        query={query}\n        setSortBy={setSortBy}\n        reverse={reverse}\n        setQuery={setQuery}\n        resetSort={resetSort}\n      />\n      <main>\n      <ListOfPosts\n        posts={sorted}\n        isInEditMode={isInEditMode}\n        setPosts={setPosts}\n      />\n        {isInEditMode &&\n          <AddPostButton\n          addPopUpToggler={addPopUpToggler}\n          />}\n        {addPopUpIsShown &&\n          <AddPost\n            setAddPopUpIsShown={setAddPopUpIsShown}\n            addPost={addPost}\n          />}\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}