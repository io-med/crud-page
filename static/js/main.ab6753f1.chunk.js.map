{"version":3,"sources":["api/api.ts","components/Button/Button.tsx","components/ResultMessage/ResultMessage.tsx","components/AddPostForm/AddPostForm.tsx","components/PopUpOverlay/PopUpOverlay.tsx","components/AddPost/AddPost.tsx","components/AddPostButton/AddPostButton.tsx","components/SearchAndSort/SearchAndSort.tsx","components/Header/Header.tsx","components/ConfirmPopUp/ConfirmPopUp.tsx","components/EditPopUp/EditPopUp.tsx","components/EditOrDelete/EditOrDelete.tsx","components/PostCard/PostCard.tsx","components/ListOfPosts/ListOfPosts.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BASE_URL","Button","clickHandler","text","isWhite","isSubmit","fixedWidth","isDisabled","className","classNames","type","onClick","disabled","ResultMessage","hidePopUp","itWasError","message","AddPostForm","addPost","useState","title","setTitle","setText","image","setImage","url","setUrl","errorWasReceived","setErrorWasReceived","postWasAdded","setPostWasAdded","isHidden","SetIsHidden","changeVisibility","current","useEffect","setTimeout","newPost","submitHandler","event","postToAdd","post","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","resp","catch","onSubmit","value","onChange","target","placeholder","required","PopUpOverlay","AddPost","setAddPopUpIsShown","AddPostButton","addPopUpToggler","SearchAndSort","isReverse","query","setSortBy","reverse","setQuery","resetSort","Header","modeToggler","isInEditMode","isReversed","href","ConfirmPopUp","popUpDisplayHandler","postId","setPosts","buttonIsDisabled","setButtonIsDisabled","deletePost","idOfPostToDelete","ok","Promise","reject","removePost","filter","id","EditPopUp","postData","postWasChanged","setPostWasChanged","modifiedPost","posts","map","changeSelectedPost","EditOrDelete","confirmIsShown","setConfirmIsShown","editIsShown","setEditIsShown","PostCard","rel","src","alt","ListOfPosts","active","App","addPopUpIsShown","setIsInEditMode","sortBy","setIsReversed","sorted","toLowerCase","includes","sort","postA","postB","localeCompare","sort_order","Date","updated_at","getTime","loadAllPosts","postsFormServer","prev","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+cAEMA,G,MAAW,qC,6CCSJC,EAA0B,SAAC,GAOjC,IANLC,EAMI,EANJA,aACAC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,WACAC,EACI,EADJA,WAEA,OACE,wBACEC,UAAWC,IACT,SACA,CAAE,gBAAiBL,GACnB,CAAE,sBAAuBE,IAE3BI,KAAML,EAAW,SAAW,SAC5BM,QAAST,EACTU,SAAUL,EARZ,SAUGJ,KCtBMU,G,MAAiC,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAEtDC,EAAU,WAMd,OAJID,IACFC,EAAU,+BAIV,sBAAKR,UAAU,gBAAf,UACE,mBACEA,UAAWC,IACT,sBACA,CAAE,6BAA8BM,IAHpC,SAMGC,IAGH,cAAC,EAAD,CACEb,KAAK,QACLG,YAAY,EACZJ,aAAcY,SClBTG,EAA+B,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASJ,EAAgB,EAAhBA,UACtD,EAA0BK,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,IAAjC,mBAAOhB,EAAP,KAAamB,EAAb,KACA,EAA0BH,mBAAS,IAAnC,mBAAOI,EAAP,KAAcC,EAAd,KACA,EAAsBL,mBAAS,IAA/B,mBAAOM,EAAP,KAAYC,EAAZ,KACA,EAAgDP,oBAAS,GAAzD,mBAAOQ,EAAP,KAAyBC,EAAzB,KACA,EAAwCT,oBAAS,GAAjD,mBAAOU,EAAP,KAAqBC,EAArB,KACA,EAAgCX,oBAAS,GAAzC,mBAAOY,EAAP,KAAiBC,EAAjB,KAEMC,EAAmB,WACvBD,GAAY,SAAAE,GAAO,OAAKA,MAG1BC,qBAAU,WACRC,WAAWH,EAAkB,KAC5B,IAEH,IAAMI,EAAU,CACdjB,QACAjB,OACAoB,QACAE,OAUIa,EAAgB,SACpBC,EACAC,GHRsB,IAACC,EGUvBF,EAAMG,kBHViBD,EGWZD,EHVNG,MAAM,GAAD,OAAI3C,GAAY,CAC1B4C,OAAQ,OACRC,QAAS,CACP,eAAgB,mCAElBC,KAAMC,KAAKC,UAAUP,KAEpBQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WGIxBF,MAAK,SAACG,GACLlC,EAAQkC,GACRtB,GAAgB,MAEjBuB,OAAM,WACLzB,GAAoB,MAjBxBP,EAAS,IACTC,EAAQ,IACRE,EAAS,IACTE,EAAO,KAmBT,OACE,uBACElB,UAAWC,IACT,cACA,CAAC,sBAAsBsB,IAEzBuB,SAAU,SAACf,GACTD,EAAcC,EAAOF,IANzB,UASGV,GAAoBE,GACnB,sBAAKrB,UAAU,uBAAf,UACE,oBACEA,UAAU,uBADZ,0BAMA,uBACEA,UAAU,qBACVE,KAAK,OACL6C,MAAOnC,EACPoC,SAAW,SAAAjB,GACTlB,EAASkB,EAAMkB,OAAOF,QAExBG,YAAY,qBACZC,UAAQ,IAGV,uBACEnD,UAAU,qBACVE,KAAK,OACL6C,MAAOpD,EACPqD,SAAW,SAAAjB,GACTjB,EAAQiB,EAAMkB,OAAOF,QAEvBG,YAAY,mBACZC,UAAQ,IAGV,uBACEnD,UAAU,qBACVE,KAAK,OACL6C,MAAOhC,EACPiC,SAAW,SAAAjB,GACTf,EAASe,EAAMkB,OAAOF,QAExBG,YAAY,gBACZC,UAAQ,IAGV,uBACEnD,UAAU,qBACVE,KAAK,OACL6C,MAAO9B,EACP+B,SAAW,SAAAjB,GACTb,EAAOa,EAAMkB,OAAOF,QAEtBG,YAAY,kBACZC,UAAQ,IAGV,sBAAKnD,UAAU,uBAAf,UACE,cAAC,EAAD,CACEL,KAAK,WACLE,UAAU,IAGZ,cAAC,EAAD,CACEF,KAAK,SACLD,aAAcY,EACdV,SAAS,UAKjB,sBAAKI,UAAU,uBAAf,UACGmB,GACC,cAAC,EAAD,CACEb,UAAWA,EACXC,WAAYY,IAGfE,GACC,cAAC,EAAD,CACEf,UAAWA,EACXC,WAAYY,WC1IXiC,G,MAAgC,SAAC,GAAmB,IAAjB9C,EAAgB,EAAhBA,UAC9C,EAAgCK,oBAAS,GAAzC,mBAAOY,EAAP,KAAiBC,EAAjB,KAEMC,EAAmB,WACvBD,GAAY,SAAAE,GAAO,OAAKA,MAO1B,OAJAC,qBAAU,WACRC,WAAWH,EAAkB,KAC5B,IAGD,qBACEzB,UAAWC,IACT,eACA,CAAC,uBAAwBsB,IAE3BpB,QAASG,MCfF+C,EAA2B,SAAC,GAGlC,IAFLC,EAEI,EAFJA,mBACA5C,EACI,EADJA,QAGMJ,EAAY,WAChBgD,GAAmB,IAGrB,OACE,sBAAKtD,UAAU,UAAf,UACE,cAAC,EAAD,CACEM,UAAWA,IAGb,cAAC,EAAD,CACEI,QAASA,EACTJ,UAAWA,QClBNiD,G,MAAiC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAC/C,EAAgC7C,oBAAS,GAAzC,mBAAOY,EAAP,KAAiBC,EAAjB,KAEMC,EAAmB,WACvBD,GAAY,SAAAE,GAAO,OAAKA,MAO1B,OAJAC,qBAAU,WACRC,WAAWH,EAAkB,KAC5B,IAID,qBACEzB,UAAWC,IACT,gBACA,CAAC,wBAAyBsB,IAH9B,SAME,cAAC,EAAD,CACE5B,KAAK,kBACLD,aAAc8D,QClBTC,G,YAAiC,SAAC,GAOxC,IANLC,EAMI,EANJA,UACAC,EAKI,EALJA,MACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,SACAC,EACI,EADJA,UAEA,OACE,sBAAK/D,UAAU,gBAAf,UACE,uBACEA,UAAU,uBACVE,KAAK,OACL6C,MAAOY,EACPT,YAAY,YACZF,SAAU,SAACjB,GACT+B,EAAS/B,EAAMkB,OAAOF,UAI1B,yBACE/C,UAAU,wBACVgD,SAAU,SAACjB,GACT6B,EAAU7B,EAAMkB,OAAOF,QAH3B,UAME,wBAAQA,MAAM,QAAd,0BAIA,wBAAQA,MAAM,OAAd,wBAIA,wBAAQA,MAAM,QAAd,mBAIA,wBAAQA,MAAM,UAAd,wBAKF,cAAC,EAAD,CACEpD,KAAM+D,EAAY,IAAM,IACxBhE,aAAcmE,IAGhB,cAAC,EAAD,CACElE,KAAK,QACLD,aAAcqE,SC/CTC,EAA0B,SAAC,GASjC,IARLC,EAQI,EARJA,YACAC,EAOI,EAPJA,aACAC,EAMI,EANJA,WACAR,EAKI,EALJA,MACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,SACAC,EACI,EADJA,UAEA,OACE,yBAAQ/D,UAAU,SAAlB,UACE,oBAAIA,UAAU,kBAAd,SACE,mBACEA,UAAU,oBACVoE,KAAK,IAFP,oBAOF,cAAC,EAAD,CACEV,UAAWS,EACXR,MAAOA,EACPC,UAAWA,EACXC,QAASA,EACTC,SAAUA,EACVC,UAAWA,IAEb,cAAC,EAAD,CACEpE,KACEuE,EACI,YACA,YAENpE,YAAY,EACZJ,aAAcuE,QCnCTI,G,wBAAgC,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,oBAAqBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAC3E,EAAgD7D,oBAAS,GAAzD,mBAAOQ,EAAP,KAAyBC,EAAzB,KACA,EAAgCT,oBAAS,GAAzC,mBAAOY,EAAP,KAAiBC,EAAjB,KACA,EAAgDb,oBAAS,GAAzD,mBAAO8D,EAAP,KAAyBC,EAAzB,KAEMjD,EAAmB,WACvBD,GAAY,SAAAE,GAAO,OAAKA,MAG1BC,qBAAU,WACRC,WAAWH,EAAkB,KAC5B,IAEH,IAAMnB,EAAY,WAChBgE,GAAoB,IAGhBK,EAAa,SAACC,IThBI,SAACL,GACzB,OAAOpC,MAAM,GAAD,OAAI3C,EAAJ,YAAgB+E,GAAU,CAAEnC,OAAQ,WAC/CK,MAAK,SAAAC,GACJ,OAAKA,EAASmC,GAIPnC,EAASC,OAHPmC,QAAQC,aSajBC,CAAWJ,GACRnC,MAAK,WACJ+B,GAAS,SAAC9C,GACR,OAAOA,EACJuD,QAAO,SAAAhD,GAAI,OAAIA,EAAKiD,KAAOX,WAGjC1B,OAAM,WACLzB,GAAoB,OAS1B,OACE,sBAAKpB,UAAU,eAAf,UACE,cAAC,EAAD,CACEM,UAAWA,IAGb,sBACEN,UAAWC,IACT,wBACA,CAAE,gCAAiCsB,IAHvC,UAMGJ,GACI,sBAAKnB,UAAU,0BAAf,UACD,mBAAGA,UAAU,qBAAb,2BAIA,sBAAKA,UAAU,wBAAf,UACE,cAAC,EAAD,CACEN,aAzBO,WACnBiF,EAAWJ,GACXG,GAAoB,IAwBR/E,KAAK,MACLC,SAAS,EACTE,YAAY,EACZC,WAAY0E,IAGd,cAAC,EAAD,CACE/E,aAAcY,EACdX,KAAK,KACLG,YAAY,UAMpB,qBAAKE,UAAU,wBAAf,SACGmB,GACC,cAAC,EAAD,CACEb,UAAWA,EACXC,WAAYY,cC3EbgE,G,MAA6B,SAAC,GAIpC,IAHLb,EAGI,EAHJA,oBACAc,EAEI,EAFJA,SACAZ,EACI,EADJA,SAEA,EAA0B7D,mBAASyE,EAASxE,OAA5C,mBAAOA,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAASyE,EAASzF,MAA1C,mBAAOA,EAAP,KAAamB,EAAb,KACA,EAA0BH,mBAASyE,EAASrE,OAA5C,mBAAOA,EAAP,KAAcC,EAAd,KACA,EAAsBL,mBAASyE,EAASnE,KAAxC,mBAAOA,EAAP,KAAYC,EAAZ,KACA,EAAgDP,oBAAS,GAAzD,mBAAOQ,EAAP,KAAyBC,EAAzB,KACA,EAA4CT,oBAAS,GAArD,mBAAO0E,EAAP,KAAuBC,EAAvB,KACA,EAAgC3E,oBAAS,GAAzC,mBAAOY,EAAP,KAAiBC,EAAjB,KACA,EAAgDb,oBAAS,GAAzD,mBAAO8D,EAAP,KAAyBC,EAAzB,KAEMjD,EAAmB,WACvBD,GAAY,SAAAE,GAAO,OAAKA,MAG1BC,qBAAU,WACRC,WAAWH,EAAkB,KAC5B,IAEH,IAAM8D,EAAe,CACnB3E,QACAjB,OACAoB,QACAE,OAaIX,EAAY,WAChBgE,GAAoB,IAGhBxC,EAAgB,SAACC,GV/BD,IAACE,EAAqBsC,EUgC1CxC,EAAMG,iBACNwC,GAAoB,IVjCCzC,EUkCZsD,EVlCiChB,EUkCnBa,EAASF,GVjC3B/C,MAAM,GAAD,OAAI3C,EAAJ,YAAgB+E,GAAU,CACpCnC,OAAQ,MACRC,QAAS,CACP,eAAgB,mCAElBC,KAAMC,KAAKC,UAAUP,KAEpBQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WU2BxBF,MAAK,SAACC,GACL8B,GAAS,SAAA9C,GACP,OApBmB,SAAC8D,EAAe9C,GACzC,OAAO8C,EAAMC,KAAI,SAAAxD,GACf,OAAIA,EAAKiD,KAAOxC,EAASwC,GAChB,2BAAKjD,GAASS,GAGhBT,KAcIyD,CAAmBhE,EAASgB,MAErC4C,GAAkB,MAEnBzC,OAAM,WACLzB,GAAoB,OAI1B,OACE,sBAAKpB,UAAU,YAAf,UACE,cAAC,EAAD,CACEM,UAAWA,IAGb,uBACEN,UAAWC,IACT,kBACA,CAAE,0BAA4BsB,IAEhCuB,SAAU,SAACf,GACTD,EAAcC,IANlB,UASGZ,GAAoBkE,GACnB,sBAAKrF,UAAU,uBAAf,UACE,oBAAIA,UAAU,qBAAd,4BAIA,uBACEA,UAAU,mBACVE,KAAK,OACL6C,MAAOnC,EACPoC,SAAW,SAAAjB,GACTlB,EAASkB,EAAMkB,OAAOF,QAExBG,YAAY,qBACZC,UAAQ,IAGV,uBACEnD,UAAU,mBACVE,KAAK,OACL6C,MAAOpD,EACPqD,SAAW,SAAAjB,GACTjB,EAAQiB,EAAMkB,OAAOF,QAEvBG,YAAY,mBACZC,UAAQ,IAGV,uBACEnD,UAAU,mBACVE,KAAK,OACL6C,MAAOhC,EACPiC,SAAW,SAAAjB,GACTf,EAASe,EAAMkB,OAAOF,QAExBG,YAAY,gBACZC,UAAQ,IAGV,uBACEnD,UAAU,mBACVE,KAAK,OACL6C,MAAO9B,EACP+B,SAAW,SAAAjB,GACTb,EAAOa,EAAMkB,OAAOF,QAEtBG,YAAY,kBACZC,UAAQ,IAGV,sBAAKnD,UAAU,qBAAf,UACE,cAAC,EAAD,CACEL,KAAK,SACLE,UAAU,EACVE,WAAY0E,IAGd,cAAC,EAAD,CACE9E,KAAK,SACLC,SAAS,EACTF,aAAcY,UAMtB,sBAAKN,UAAU,qBAAf,UACGmB,GACC,cAAC,EAAD,CACEb,UAAWA,EACXC,WAAYY,IAIfkE,GACC,cAAC,EAAD,CACE/E,UAAWA,EACXC,WAAYY,eCxJbwE,EAAgC,SAAC,GAA4B,IAA1BP,EAAyB,EAAzBA,SAAUZ,EAAe,EAAfA,SACxD,EAA4C7D,oBAAS,GAArD,mBAAOiF,EAAP,KAAuBC,EAAvB,KACA,EAAsClF,oBAAS,GAA/C,mBAAOmF,EAAP,KAAoBC,EAApB,KACA,EAAgCpF,oBAAS,GAAzC,mBAAOY,EAAP,KAAiBC,EAAjB,KAEMC,EAAmB,WACvBD,GAAY,SAAAE,GAAO,OAAKA,MAG1BC,qBAAU,WACRC,WAAWH,EAAkB,KAC5B,IAUH,OACE,sBACEzB,UAAWC,IACT,eACA,CAAE,uBAAwBsB,IAH9B,UAME,cAAC,EAAD,CACE5B,KAAK,OACLD,aAjBW,WACfqG,GAAe,IAiBXjG,YAAY,IAGd,gCACG8F,GACC,cAAC,EAAD,CACEtB,oBAAqBuB,EACrBtB,OAAQa,EAASF,GACjBV,SAAUA,IAIbsB,GACC,cAAC,EAAD,CACEV,SAAUA,EACVd,oBAAqByB,EACrBvB,SAAUA,OAKhB,cAAC,EAAD,CACE7E,KAAK,SACLC,SAAS,EACTF,aAtCc,WAClBmG,GAAkB,IAsCd/F,YAAY,QC1DPkG,EAA4B,SAAC,GAInC,IAHLZ,EAGI,EAHJA,SACAlB,EAEI,EAFJA,aACAM,EACI,EADJA,SAEA,OACE,sBAAKxE,UAAU,WAAf,UACE,oBAAIA,UAAU,oBAAd,SACGoF,EAASxE,QAGZ,mBAAGZ,UAAU,uBAAb,SACGoF,EAASzF,OAGZ,mBACEyE,KAAMgB,EAASnE,IACfgC,OAAO,SACPgD,IAAI,aAHN,SAKE,qBACEjG,UAAWC,IACT,kBACA,CAAC,yBAA0BiE,IAE7BgC,IAAKd,EAASrE,MACdoF,IAAKf,EAASxE,UAIjBsD,GACC,cAAC,EAAD,CACEkB,SAAUA,EACVZ,SAAUA,QClCP4B,EAA+B,SAAC,GAAuC,IAArCZ,EAAoC,EAApCA,MAAOtB,EAA6B,EAA7BA,aAAcM,EAAe,EAAfA,SAElE,OACE,oBAAIxE,UAAU,cAAd,SACGwF,EAAMC,KAAI,SAAAxD,GAAI,OACI,IAAhBA,EAAKoE,QACN,oBACErG,UAAU,oBADZ,SAIE,cAAC,EAAD,CACEkE,aAAcA,EACdkB,SAAUnD,EACVuC,SAAUA,KALPvC,EAAKiD,UCgHLoB,MAxHf,WACE,MAA0B3F,mBAAiB,IAA3C,mBAAO6E,EAAP,KAAchB,EAAd,KACA,EAA8C7D,oBAAS,GAAvD,mBAAO4F,EAAP,KAAwBjD,EAAxB,KACA,EAAwC3C,oBAAS,GAAjD,mBAAOuD,EAAP,KAAqBsC,EAArB,KACA,EAA4B7F,mBAAS,IAArC,mBAAO8F,EAAP,KAAe7C,EAAf,KACA,EAAoCjD,oBAAS,GAA7C,mBAAOwD,EAAP,KAAmBuC,EAAnB,KACA,EAA0B/F,mBAAS,IAAnC,mBAAOgD,EAAP,KAAcG,EAAd,KAYM6C,EAASnB,EAAMP,QAAO,SAAAhD,GAC1B,OACEA,EAAKrB,MACFgG,cACAC,SAASlD,EAAMiD,gBACf3E,EAAKtC,KACLiH,cACAC,SAASlD,EAAMiD,kBAItBD,EAAOG,MAAK,SAACC,EAAOC,GAClB,OAAQP,GACN,IAAK,QACH,OAAOM,EAAMnG,MAAMqG,cAAcD,EAAMpG,OAEzC,IAAK,OACH,OAAOmG,EAAMpH,KAAKsH,cAAcD,EAAMrH,MAExC,IAAK,QACH,OAAIoH,EAAMG,YAAcF,EAAME,WACpBH,EAAMG,WAAaF,EAAME,WACxBH,EAAMG,YACP,EACCF,EAAME,WACR,GAEC,EAGZ,IAAK,UAIH,OAHc,IAAIC,KAAKJ,EAAMK,YAAYC,UAC3B,IAAIF,KAAKH,EAAMI,YAAYC,UAI3C,QACE,OAAO,MAITlD,GACFwC,EAAO9C,UAGT,IAQMyD,EAAe,Wd3EdnF,MAAM,GAAD,OAAI3C,IACbiD,MAAK,SAAAC,GACJ,OAAKA,EAASmC,GAIPnC,EAASC,OAHPmC,QAAQC,Yc0EhBtC,MAAK,SAAA8E,GACJ/C,EAAS+C,OAcf,OAJA5F,qBAAU,WACR2F,MACC,IAGD,qCACE,cAAC,EAAD,CACErD,YA5Bc,WAClBuC,GAAgB,SAAA9E,GAAO,OAAKA,MA4BxBwC,aAAcA,EACdC,WAAYA,EACZR,MAAOA,EACPC,UAAWA,EACXC,QAxFU,WACd6C,GAAc,SAAAhF,GAAO,OAAKA,MAwFtBoC,SAAUA,EACVC,UAtFY,WAChBH,EAAU,IACV8C,GAAc,GACd5C,EAAS,OAqFP,iCACA,cAAC,EAAD,CACE0B,MAAOmB,EACPzC,aAAcA,EACdM,SAAUA,IAETN,GACC,cAAC,EAAD,CACAV,gBAzCgB,WACtBF,GAAmB,SAAA5B,GAAO,OAAKA,QA0C1B6E,GACC,cAAC,EAAD,CACEjD,mBAAoBA,EACpB5C,QAnCM,SAACuB,GACfuC,GAAS,SAAAgD,GACP,MAAM,GAAN,mBAAWA,GAAX,4BAAsBvF,GAAtB,IAA4BoE,OAAQ,mBC3E3BoB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBlF,MAAK,YAAkD,IAA/CmF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ab6753f1.chunk.js","sourcesContent":["import { Post } from \"../types/Post\";\n\nconst BASE_URL = 'https://yourtestapi.com/api/posts';\n\nexport const getPosts = (): Promise<Post[]> => {\n  return fetch(`${BASE_URL}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject();\n      }\n\n      return response.json();\n    })\n};\n\nexport const removePost = (postId: number) => {\n  return fetch(`${BASE_URL}/${postId}`, { method: 'DELETE' })\n  .then(response => {\n    if (!response.ok) {\n      return Promise.reject();\n    }\n\n    return response.json();\n  })\n};\n\nexport const editPost = (post: Partial<Post>, postId: number) => {\n  return fetch(`${BASE_URL}/${postId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(post),\n  })\n    .then(response => response.json());\n}\n\nexport const createPost = (post: Partial<Post>): Promise<Post> => {\n  return fetch(`${BASE_URL}`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(post),\n  })\n    .then(response => response.json());\n};\n","import classNames from 'classnames';\n\ntype Props = {\n  text: string;\n  clickHandler?: () => void;\n  isWhite?: boolean;\n  isSubmit?: boolean;\n  isDisabled?: boolean;\n  fixedWidth?: boolean;\n}\n\nexport const Button: React.FC<Props> = ({\n  clickHandler,\n  text,\n  isWhite,\n  isSubmit,\n  fixedWidth,\n  isDisabled,\n}) => {\n  return (\n    <button\n      className={classNames(\n        'Button',\n        { 'Button--white': isWhite },\n        { 'Button--fixed-width': fixedWidth },\n      )}\n      type={isSubmit ? 'submit' : 'button'}\n      onClick={clickHandler}\n      disabled={isDisabled}\n    >\n      {text}\n    </button>\n  )\n}","import classNames from 'classnames';\nimport { Button } from '../Button';\n\ntype Props = {\n  hidePopUp: () => void;\n  itWasError: boolean;\n}\n\nexport const ResultMessage: React.FC<Props> = ({ hidePopUp, itWasError }) => {\n\n  let message = 'Success!';\n\n  if (itWasError) {\n    message = 'Oops, something went wrong!'\n  }\n\n  return (\n    <div className=\"ResultMessage\">\n      <p\n        className={classNames(\n          'ResultMessage__text',\n          { 'ResultMessage__text--error': itWasError },\n        )}\n      >\n        {message}\n      </p>\n\n      <Button\n        text=\"close\"\n        fixedWidth={true}\n        clickHandler={hidePopUp}\n      />\n    </div>\n  )\n}\n","import classNames from \"classnames\";\nimport { useEffect, useState } from \"react\";\nimport { createPost } from \"../../api/api\";\nimport { Post } from \"../../types/Post\";\nimport { Button } from \"../Button\";\nimport { ResultMessage } from \"../ResultMessage\";\n\ntype Props = {\n  addPost: (post: Post) => void;\n  hidePopUp: () => void;\n}\n\nexport const AddPostForm: React.FC<Props> = ({ addPost, hidePopUp }) => {\n  const [title, setTitle] = useState('');\n  const [text, setText] = useState('');\n  const [image, setImage] = useState('');\n  const [url, setUrl] = useState('');\n  const [errorWasReceived, setErrorWasReceived] = useState(false);\n  const [postWasAdded, setPostWasAdded] = useState(false);\n  const [isHidden, SetIsHidden] = useState(true);\n\n  const changeVisibility = () => {\n    SetIsHidden(current => !current);\n  };\n\n  useEffect(() => {\n    setTimeout(changeVisibility, 0)\n  }, []);\n\n  const newPost = {\n    title,\n    text,\n    image,\n    url,\n  }\n\n  const clear = () => {\n    setTitle('');\n    setText('');\n    setImage('');\n    setUrl('');\n  }\n\n  const submitHandler = (\n    event: React.FormEvent<HTMLFormElement>,\n    postToAdd: Partial<Post>,\n  ) => {\n    event.preventDefault();\n    createPost(postToAdd)\n      .then((resp) => {\n        addPost(resp);\n        setPostWasAdded(true);\n      })\n      .catch(() => {\n        setErrorWasReceived(true);\n      })\n    clear();\n  };\n\n  return (\n    <form\n      className={classNames(\n        'AddPostForm',\n        {'AddPostForm--hidden':isHidden},\n      )}\n      onSubmit={(event) => {\n        submitHandler(event, newPost)\n      }}\n    >\n      {errorWasReceived || postWasAdded ||\n        <div className=\"AddPostForm__content\">\n          <h2\n            className=\"AddPostForm__heading\"\n          >\n            Add new post\n          </h2>\n\n          <input\n            className=\"AddPostForm__input\"\n            type=\"text\"\n            value={title}\n            onChange={(event => {\n              setTitle(event.target.value)\n            })}\n            placeholder=\"enter english name\"\n            required\n          />\n\n          <input\n            className=\"AddPostForm__input\"\n            type=\"text\"\n            value={text}\n            onChange={(event => {\n              setText(event.target.value)\n            })}\n            placeholder=\"enter latin name\"\n            required\n          />\n\n          <input\n            className=\"AddPostForm__input\"\n            type=\"text\"\n            value={image}\n            onChange={(event => {\n              setImage(event.target.value)\n            })}\n            placeholder=\"add image url\"\n            required\n          />\n\n          <input\n            className=\"AddPostForm__input\"\n            type=\"text\"\n            value={url}\n            onChange={(event => {\n              setUrl(event.target.value)\n            })}\n            placeholder=\"add article url\"\n            required\n          />\n\n          <div className=\"AddPostForm__buttons\">\n            <Button\n              text=\"add post\"\n              isSubmit={true}\n            />\n\n            <Button\n              text=\"cancel\"\n              clickHandler={hidePopUp}\n              isWhite={true}\n            />\n          </div>\n        </div>\n      }\n      <div className=\"AddPostForm__buttons\">\n        {errorWasReceived &&\n          <ResultMessage\n            hidePopUp={hidePopUp}\n            itWasError={errorWasReceived}\n          />\n        }\n        {postWasAdded &&\n          <ResultMessage\n            hidePopUp={hidePopUp}\n            itWasError={errorWasReceived}\n          />\n        }\n      </div>\n    </form>\n  )\n}\n","import classNames from \"classnames\";\nimport { useEffect, useState } from \"react\"\n\ntype Props = {\n  hidePopUp: () => void;\n}\n\nexport const PopUpOverlay: React.FC<Props> = ({ hidePopUp }) => {\n  const [isHidden, SetIsHidden] = useState(true);\n\n  const changeVisibility = () => {\n    SetIsHidden(current => !current);\n  };\n\n  useEffect(() => {\n    setTimeout(changeVisibility, 0)\n  }, []);\n\n  return (\n    <div\n      className={classNames(\n        'PopUpOverlay',\n        {'PopUpOverlay--hidden': isHidden}\n      )}\n      onClick={hidePopUp}\n    >\n    </div>\n  )\n}","import { Post } from \"../../types/Post\";\nimport { AddPostForm } from \"../AddPostForm\";\nimport { PopUpOverlay } from \"../PopUpOverlay\";\n\ntype Props = {\n  setAddPopUpIsShown: (addPopUpIsShown: boolean) => void;\n  addPost: (post: Post) => void;\n}\n\nexport const AddPost: React.FC<Props> = ({\n  setAddPopUpIsShown,\n  addPost,\n}) => {\n\n  const hidePopUp = () => {\n    setAddPopUpIsShown(false);\n  }\n\n  return (\n    <div className=\"AddPost\">\n      <PopUpOverlay \n        hidePopUp={hidePopUp}\n      />\n\n      <AddPostForm\n        addPost={addPost}\n        hidePopUp={hidePopUp}\n      />\n    </div>\n  )\n}\n","import classNames from \"classnames\";\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"../Button\"\n\ntype Props = {\n  addPopUpToggler: () => void;\n}\n\nexport const AddPostButton: React.FC<Props> = ({ addPopUpToggler }) => {\n  const [isHidden, SetIsHidden] = useState(true);\n\n  const changeVisibility = () => {\n    SetIsHidden(current => !current);\n  };\n\n  useEffect(() => {\n    setTimeout(changeVisibility, 0)\n  }, []);\n\n  return (\n\n    <div\n      className={classNames(\n        'AddPostButton',\n        {'AddPostButton--hidden': isHidden},\n      )}\n    >\n      <Button\n        text=\"create new post\"\n        clickHandler={addPopUpToggler}\n      />\n    </div>\n  )\n}","import { Button } from \"../Button\"\n\ntype Props = {\n  isReverse: boolean;\n  query: string;\n  setSortBy: (sortBy: string) => void;\n  reverse: () => void;\n  setQuery: (query: string) => void;\n  resetSort: () => void;\n}\n\nexport const SearchAndSort: React.FC<Props> = ({\n  isReverse,\n  query,\n  setSortBy,\n  reverse,\n  setQuery,\n  resetSort,\n}) => {\n  return (\n    <div className=\"SearchAndSort\">\n      <input\n        className=\"SearchAndSort__input\"\n        type=\"text\"\n        value={query}\n        placeholder=\"search...\"\n        onChange={(event) => {\n          setQuery(event.target.value)\n        }}\n      />\n\n      <select\n        className=\"SearchAndSort__select\"\n        onChange={(event) => {\n          setSortBy(event.target.value)\n        }}\n      >\n        <option value=\"title\">\n          english name\n        </option>\n\n        <option value=\"text\">\n          latin name\n        </option>\n\n        <option value=\"order\">\n          order\n        </option>\n\n        <option value=\"updated\">\n          updated\n        </option>\n      </select>\n\n      <Button\n        text={isReverse ? 'v' : '^'}\n        clickHandler={reverse}\n      />\n      \n      <Button\n        text=\"reset\"\n        clickHandler={resetSort}\n      />\n    </div>\n  )\n}","import { Button } from \"../Button\";\nimport { SearchAndSort } from \"../SearchAndSort\";\n\ntype Props = {\n  modeToggler: () => void;\n  isInEditMode: boolean;\n  isReversed: boolean;\n  query: string;\n  setSortBy: (sortBy: string) => void;\n  reverse: () => void;\n  setQuery: (query: string) => void;\n  resetSort: () => void;\n}\n\nexport const Header: React.FC<Props> = ({\n  modeToggler,\n  isInEditMode,\n  isReversed,\n  query,\n  setSortBy,\n  reverse,\n  setQuery,\n  resetSort,\n}) => {\n  return (\n    <header className=\"Header\">\n      <h1 className=\"Header__heading\">\n        <a\n          className=\"Header__home-link\"\n          href=\"/\"\n        >\n          CRUD\n        </a>\n      </h1>\n      <SearchAndSort\n        isReverse={isReversed}\n        query={query}\n        setSortBy={setSortBy}\n        reverse={reverse}\n        setQuery={setQuery}\n        resetSort={resetSort}\n      />\n      <Button\n        text={\n          isInEditMode\n            ? 'quit edit'\n            : 'edit mode'\n        }\n        fixedWidth={true}\n        clickHandler={modeToggler}\n      />\n    </header>\n  )\n};\n","import classNames from \"classnames\";\nimport { useEffect, useState } from \"react\";\nimport { removePost } from \"../../api/api\";\nimport { Post } from \"../../types/Post\";\nimport { Button } from \"../Button\";\nimport { PopUpOverlay } from \"../PopUpOverlay\";\nimport { ResultMessage } from \"../ResultMessage\";\n\ntype Props = {\n  popUpDisplayHandler: (isDisplayed: boolean) => void;\n  setPosts: (posts: Post[] | ((current: Post[]) => Post[])) => void;\n  postId: number;\n}\n\nexport const ConfirmPopUp: React.FC<Props> = ({ popUpDisplayHandler, postId, setPosts }) => {\n  const [errorWasReceived, setErrorWasReceived] = useState(false);\n  const [isHidden, SetIsHidden] = useState(true);\n  const [buttonIsDisabled, setButtonIsDisabled] = useState(false);\n\n  const changeVisibility = () => {\n    SetIsHidden(current => !current);\n  };\n\n  useEffect(() => {\n    setTimeout(changeVisibility, 0)\n  }, []);\n\n  const hidePopUp = () => {\n    popUpDisplayHandler(false);\n  }\n\n  const deletePost = (idOfPostToDelete: number) => {\n    removePost(idOfPostToDelete)\n      .then(() => {\n        setPosts((current: Post[]) => {\n          return current\n            .filter(post => post.id !== postId);\n        });\n      })\n      .catch(() => {\n        setErrorWasReceived(true)\n      })\n  }\n\n  const clickHandler = () => {\n    deletePost(postId);\n    setButtonIsDisabled(true)\n  }\n\n  return (\n    <div className=\"ConfirmPopUp\">\n      <PopUpOverlay\n        hidePopUp={hidePopUp}\n      />\n\n      <div\n        className={classNames(\n          'ConfirmPopUp__content',\n          { 'ConfirmPopUp__content--hidden': isHidden },\n        )}\n      >\n        {errorWasReceived\n          || <div className=\"ConfirmPopUp__interface\">\n            <p className=\"ConfirmPopUp__text\">\n              Are you sure?\n            </p>\n\n            <div className=\"ConfirmPopUp__buttons\">\n              <Button\n                clickHandler={clickHandler}\n                text=\"yes\"\n                isWhite={true}\n                fixedWidth={true}\n                isDisabled={buttonIsDisabled}\n              />\n\n              <Button\n                clickHandler={hidePopUp}\n                text=\"no\"\n                fixedWidth={true}\n              />\n            </div>\n          </div>\n        }\n\n        <div className=\"ConfirmPopUp__message\">\n          {errorWasReceived &&\n            <ResultMessage\n              hidePopUp={hidePopUp}\n              itWasError={errorWasReceived}\n            />\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n","import classNames from \"classnames\";\nimport { useEffect, useState } from \"react\";\nimport { editPost } from \"../../api/api\";\nimport { Post } from \"../../types/Post\";\nimport { Button } from \"../Button\";\nimport { PopUpOverlay } from \"../PopUpOverlay\";\nimport { ResultMessage } from \"../ResultMessage\";\n\ntype Props = {\n  popUpDisplayHandler: (isDisplayed: boolean) => void;\n  setPosts: (posts: Post[] | ((current: Post[]) => Post[])) => void;\n  postData: Post;\n}\n\nexport const EditPopUp: React.FC<Props> = ({\n  popUpDisplayHandler,\n  postData,\n  setPosts,\n}) => {\n  const [title, setTitle] = useState(postData.title);\n  const [text, setText] = useState(postData.text);\n  const [image, setImage] = useState(postData.image);\n  const [url, setUrl] = useState(postData.url);\n  const [errorWasReceived, setErrorWasReceived] = useState(false);\n  const [postWasChanged, setPostWasChanged] = useState(false);\n  const [isHidden, SetIsHidden] = useState(true);\n  const [buttonIsDisabled, setButtonIsDisabled] = useState(false);\n\n  const changeVisibility = () => {\n    SetIsHidden(current => !current);\n  };\n\n  useEffect(() => {\n    setTimeout(changeVisibility, 0)\n  }, []);\n\n  const modifiedPost = {\n    title,\n    text,\n    image,\n    url,\n  }\n\n  const changeSelectedPost = (posts: Post[], response: Post) => {\n    return posts.map(post => {\n      if (post.id === response.id) {\n        return { ...post, ...response };\n      }\n\n      return post;\n    })\n  }\n\n  const hidePopUp = () => {\n    popUpDisplayHandler(false);\n  }\n\n  const submitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setButtonIsDisabled(true);\n    editPost(modifiedPost, postData.id)\n      .then((response) => {\n        setPosts(current => {\n          return changeSelectedPost(current, response)\n        });\n        setPostWasChanged(true);\n      })\n      .catch(() => {\n        setErrorWasReceived(true);\n      });\n  };\n\n  return (\n    <div className=\"EditPopUp\">\n      <PopUpOverlay\n        hidePopUp={hidePopUp}\n      />\n\n      <form\n        className={classNames(\n          'EditPopUp__form',\n          { 'EditPopUp__form--hidden' : isHidden }\n        )}\n        onSubmit={(event) => {\n          submitHandler(event);\n        }}\n      >\n        {errorWasReceived || postWasChanged ||\n          <div className=\"EditPopUp__interface\">\n            <h2 className=\"EditPopUp__heading\">\n              Edit this post\n            </h2>\n\n            <input\n              className=\"EditPopUp__input\"\n              type=\"text\"\n              value={title}\n              onChange={(event => {\n                setTitle(event.target.value)\n              })}\n              placeholder=\"enter english name\"\n              required\n            />\n\n            <input\n              className=\"EditPopUp__input\"\n              type=\"text\"\n              value={text}\n              onChange={(event => {\n                setText(event.target.value)\n              })}\n              placeholder=\"enter latin name\"\n              required\n            />\n\n            <input\n              className=\"EditPopUp__input\"\n              type=\"text\"\n              value={image}\n              onChange={(event => {\n                setImage(event.target.value)\n              })}\n              placeholder=\"add image url\"\n              required\n            />\n\n            <input\n              className=\"EditPopUp__input\"\n              type=\"text\"\n              value={url}\n              onChange={(event => {\n                setUrl(event.target.value)\n              })}\n              placeholder=\"add article url\"\n              required\n            />\n\n            <div className=\"EditPopUp__buttons\">\n              <Button\n                text=\"submit\"\n                isSubmit={true}\n                isDisabled={buttonIsDisabled}\n              />\n\n              <Button\n                text=\"cancel\"\n                isWhite={true}\n                clickHandler={hidePopUp}\n              />\n            </div>\n          </div>\n        }\n\n        <div className=\"EditPopUp__message\">\n          {errorWasReceived &&\n            <ResultMessage\n              hidePopUp={hidePopUp}\n              itWasError={errorWasReceived}\n            />\n          }\n\n          {postWasChanged &&\n            <ResultMessage\n              hidePopUp={hidePopUp}\n              itWasError={errorWasReceived}\n            />\n          }\n        </div>\n      </form>\n    </div>\n  )\n}\n","import classNames from \"classnames\";\nimport { useEffect, useState } from \"react\";\nimport { Post } from \"../../types/Post\";\nimport { Button } from \"../Button\";\nimport { ConfirmPopUp } from \"../ConfirmPopUp\";\nimport { EditPopUp } from \"../EditPopUp\";\n\ntype Props = {\n  postData: Post;\n  setPosts: (posts: Post[] | ((current: Post[]) => Post[])) => void;\n}\n\nexport const EditOrDelete: React.FC<Props> = ({ postData, setPosts }) => {\n  const [confirmIsShown, setConfirmIsShown] = useState(false);\n  const [editIsShown, setEditIsShown] = useState(false);\n  const [isHidden, SetIsHidden] = useState(true);\n\n  const changeVisibility = () => {\n    SetIsHidden(current => !current);\n  };\n\n  useEffect(() => {\n    setTimeout(changeVisibility, 0)\n  }, []);\n\n  const showEdit = () => {\n    setEditIsShown(true);\n  }\n\n  const showConfirm = () => {\n    setConfirmIsShown(true);\n  }\n\n  return (\n    <div\n      className={classNames(\n        'EditOrDelete',\n        { 'EditOrDelete--hidden': isHidden },\n      )}\n    >\n      <Button\n        text=\"edit\"\n        clickHandler={showEdit}\n        fixedWidth={true}\n      />\n\n      <div>\n        {confirmIsShown &&\n          <ConfirmPopUp\n            popUpDisplayHandler={setConfirmIsShown}\n            postId={postData.id}\n            setPosts={setPosts}\n          />\n        }\n\n        {editIsShown &&\n          <EditPopUp\n            postData={postData}\n            popUpDisplayHandler={setEditIsShown}\n            setPosts={setPosts}\n          />\n        }\n      </div>\n\n      <Button\n        text=\"delete\"\n        isWhite={true}\n        clickHandler={showConfirm}\n        fixedWidth={true}\n      />\n    </div>\n  )\n};\n","import classNames from \"classnames\"\nimport { Post } from \"../../types/Post\"\nimport { EditOrDelete } from \"../EditOrDelete\"\n\ntype Props = {\n  postData: Post;\n  isInEditMode: boolean;\n  setPosts: (posts: Post[] | ((current: Post[]) => Post[])) => void;\n}\n\nexport const PostCard: React.FC<Props> = ({\n  postData,\n  isInEditMode,\n  setPosts,\n}) => {\n  return (\n    <div className=\"PostCard\">\n      <h2 className=\"PostCard__heading\">\n        {postData.title}\n      </h2>\n\n      <p className=\"PostCard__latin-name\">\n        {postData.text}\n      </p>\n\n      <a\n        href={postData.url}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <img\n          className={classNames(\n            'PostCard__image',\n            {'PostCard__image--tall': !isInEditMode}\n          )}\n          src={postData.image}\n          alt={postData.title}\n        />\n      </a>\n\n      {isInEditMode &&\n        <EditOrDelete\n          postData={postData}\n          setPosts={setPosts}\n        />}\n    </div>\n  )\n}\n","import { Post } from \"../../types/Post\";\nimport { PostCard } from \"../PostCard\";\n\ntype Props = {\n  posts: Post[];\n  isInEditMode: boolean;\n  setPosts: (posts: Post[] | ((current: Post[]) => Post[])) => void;\n}\n\nexport const ListOfPosts: React.FC<Props> = ({ posts, isInEditMode, setPosts }) => {\n\n  return (\n    <ul className='ListOfPosts'>\n      {posts.map(post => (\n        (post.active === 1) &&\n        <li\n          className='ListOfPosts__item'\n          key={post.id}\n        >\n          <PostCard\n            isInEditMode={isInEditMode}\n            postData={post}\n            setPosts={setPosts}\n          />\n        </li>\n      ))}\n    </ul>\n  )\n};\n","import './App.scss';\nimport { useEffect, useState } from 'react';\nimport { getPosts } from './api/api';\nimport { AddPost } from './components/AddPost';\nimport { AddPostButton } from './components/AddPostButton';\nimport { Post } from './types/Post';\nimport { Header } from './components/Header';\nimport { ListOfPosts } from './components/ListOfPosts';\n\nfunction App() {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [addPopUpIsShown, setAddPopUpIsShown] = useState(false);\n  const [isInEditMode, setIsInEditMode] = useState(false);\n  const [sortBy, setSortBy] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const [query, setQuery] = useState('');\n\n  const reverse = () => {\n    setIsReversed(current => !current);\n  }\n\n  const resetSort = () => {\n    setSortBy('');\n    setIsReversed(false);\n    setQuery('');\n  }\n\n  const sorted = posts.filter(post => {\n    return (\n      post.title\n        .toLowerCase()\n        .includes(query.toLowerCase())\n      || post.text\n        .toLowerCase()\n        .includes(query.toLowerCase())\n    )\n  })\n\n  sorted.sort((postA, postB) => {\n    switch (sortBy) {\n      case 'title':\n        return postA.title.localeCompare(postB.title);\n\n      case 'text':\n        return postA.text.localeCompare(postB.text);\n\n      case 'order':\n        if (postA.sort_order && postB.sort_order) {\n          return (postA.sort_order - postB.sort_order)\n        } else if (postA.sort_order) {\n          return -1;\n        } else if (postB.sort_order) {\n          return 1;\n        } else {\n          return -1;\n        };\n\n      case 'updated':\n        const dateA = new Date(postA.updated_at).getTime();\n        const dateB = new Date(postB.updated_at).getTime();\n\n        return (dateA - dateB);\n\n      default:\n        return 0;\n    }\n  })\n\n  if (isReversed) {\n    sorted.reverse();\n  }\n\n  const modeToggler = () => {\n    setIsInEditMode(current => !current)\n  }\n\n  const addPopUpToggler = () => {\n    setAddPopUpIsShown(current => !current);\n  }\n\n  const loadAllPosts = () => {\n    getPosts()\n      .then(postsFormServer => {\n        setPosts(postsFormServer);\n      });\n  }\n\n  const addPost = (post: Post) => {\n    setPosts(prev => {\n      return [...prev, { ...post, active: 1 }];\n    });\n  };\n\n  useEffect(() => {\n    loadAllPosts();\n  }, [])\n\n  return (\n    <>\n      <Header\n        modeToggler={modeToggler}\n        isInEditMode={isInEditMode}\n        isReversed={isReversed}\n        query={query}\n        setSortBy={setSortBy}\n        reverse={reverse}\n        setQuery={setQuery}\n        resetSort={resetSort}\n      />\n      <main>\n      <ListOfPosts\n        posts={sorted}\n        isInEditMode={isInEditMode}\n        setPosts={setPosts}\n      />\n        {isInEditMode &&\n          <AddPostButton\n          addPopUpToggler={addPopUpToggler}\n          />}\n        {addPopUpIsShown &&\n          <AddPost\n            setAddPopUpIsShown={setAddPopUpIsShown}\n            addPost={addPost}\n          />}\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}